openapi: 3.0.3
info:
  title: VSX Gateway, your one stop shop to being rich (or so you think... but at least get good grades in Spring)
  description: |
    Le gateway est le point d'entrée vers VSX depuis le monde extérieur. Ce point d'entrée doit s'assurer
    que tous les services qui sont appelés, le soient dans des conditions correctes. C'est à dire que
    c'est le gateway qui va s'assurer que l'investisseur soit authentifié avant de pouvoir appeler d'autres 
    services.

    Ce point d'entrée veillera à n'exposer que les fonctionalités relevantes au monde extérieur. En particulier, 
    le gateway permettra: 
    * la création d'un investisseur
    * a un investisseur de s'authentifier
    * a un investisseur de supprimer son compte
    * a un investisseur de consultater de ses données signalétiques
    * a un investisseur de modifier son mot de passe 
    * a un investisseur de passer un ordre
    * a un investisseur de lister tous les ordres qu'il a passé
    * a un investisseur de consulter la composition de son portefeuille
    * a un investisseur de calculer la valeur totale de son portefeuille.
    * a un investisseur de verser du CASH sur son compte
    * a un investisseur de retirer du CASH sur son compte
    * a un investisseur de connaitre le dernier prix d'échange de n'importe quel titre en échange sur la plateforme.
  version: 1.0.0
paths:
  /investor/{username}:
    parameters:
      - name: username
        in: path
        description: le username de l'investisseur (plus d'infos, voir '#/components/schemas/investor_data')
        required: true
        schema: 
          type: string
    get:
      summary: Récupère les informations relatives à un investisseur donné
      responses:
        400:
          description: vous n'avez pas le droit de consulter les données de cet investisseur
        404: 
          description: l'investisseur n'a pas pu être trouvé
        200:
          description: les informations de l'investisseur
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/investor_data'
    post: 
      summary: Crée un nouvel investisseur dans le système
      requestBody:
        description: |
          Les données signalétiques d'un investisseur ainsi que les credentials qu'il souhaite
          utiliser pour s'identifier dans le système.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/investor_with_password'
      responses:
        400:
          description: Les données de l'investisseur sont invalides
        409:
          description: L'investisseur existe déjà
        201:
          description: L'investisseur a été créé
    put:
      summary: Modifie les données signalétiques d'un investisseur existant
      requestBody:
        description: |
          Les données signalétiques d'un investisseur
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/investor_data'
      responses:
        400:
          description: Les données de l'investisseur sont invalides
        404:
          description: L'investisseur n'a pas pu être trouvé
        200:
          description: L'investisseur a été mis à jour
    delete:
      summary: Supprime l'utilisateur du système.
      description: |
        Supprime l'utilisateur du système. 

        **Attention:** 
        Lorsqu'on supprime un utilisateur du système, on supprime ses credentials et son portefeuille
        (il faut que celui-ci soit vide pour qu'on puisse supprimer le compte de l'investisseur).
        Toutefois, l'historique des ordres et des transactions qui ont été passées par l'investisseur continue
        d'exister au sein du système.
      responses:
        400: 
          description: La situation de l'investisseur ne permet actuellement pas de supprimer son compte
        404:
          description: Les credentials n'ont pas pu être trouvés
        200:
          description: Les credentials ont été supprimés

  /authentication/connect:
    post:
      summary: Initie une session pour un investisseur au sein de la plateforme VSX
      requestBody:
        description: Les credentials (informations d'identifications) de l'utilisateur.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        400:
          description: Les credentials sont invalides
        401:
          description: username ou password incorrect
        200:
          description: l'utilisateur est connecté. On renvoie un token JWT pour assurer le suivi de la session.
          content:
            'text/plain':
              schema:
                type: string
                example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhdXRoMCIsInBzZXVkbyI6IkNhdDRMaWZlIn0.LqfooEI-I9VTBo-isjm812ttnIPagMCwdhRkW5ngn0_tlLX86LRoxahgskmgIeWDbm4Mu3y3D8Qbhq_71hNQTA
 
  /authentication/{username}:
    parameters:
      - name: username
        in: path
        description: le username de l'investisseur (voir service 'investor.yml' pour plus de détails)
        schema:
          type: string
        required: true
    put:
      summary: Mets à jour les credentials d'un investisseur existant
      requestBody:
        description: Credentials de l'investisseur
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/credentials'
      responses:
        400:
          description: Les credentials sont invalides
        404:
          description: Les credentials n'ont pas pu être trouvés
        200:
          description: Les credentials ont été mis à jour

  /order:
    post:
      description: |
        Passe un ordre sur la plateforme d'échange. 

        **Note** 
        On considere que les ordres passés sur la plateforme VSX sont passés en mode 'fire-and-forget'. C'est à dire
        qu'une fois qu'un ordre est passé, il n'est plus possible à un utilisateur de le modifier ni de l'annuler.
        Le système de matching pourra quant à lui modifier la valeur de la quantité 'filled' pour un ordre donné. 

        **Important**
        Le champ guid correspond à une donnée qui est fixée par le système. Il n'est donc pas permis à un 
        utilisateur de décider du guid de l'ordre qu'il passe. Toute tentative de forcer le guid devrait provoquer
        le rejet de l'ordre.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/order'
      responses:
        400:
          description: |
            L'odre n'est pas correct
        200: 
          description: |
            L'ordre a bien été passé. Renvoie l'ordre tel qu'il est connu par le système.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/order'
  /order/by-user/{username}:
    parameters:
      - name: username
        description: |
          le username de l'investisseur dont on cherche à lister tous les ordres. Pour plus d'informations 
          quant à la signification de username, se référer à 'investor.yml#/components/schemas/investordata'
        in: path
        required: true
        schema: 
          type: string
        example: picsou
    get:
      description: liste tous les ordres (ouverts et complétés) qui ont été passés par un investisseur donné 
      responses:
        404:
          description: l'investisseur n'a pas été trouvé 
        401:
          description: vous n'avez pas le droit de consulter l'historique des ordres de cet utilisateur 
        200:
          description: voici la liste des ordres passés par cet investisseur 
          content:
            'application/json':
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/order'

  /wallet/{username}:
    parameters:
    - name: username
      in: path
      description: le username de l'investisseur (plus d'infos, voir 'investor.yml#/components/schemas/investordata')
      required: true
      schema: 
        type: string
    
    get:
      description: Renvoie la liste des positions ouvertes (quantité possédée > 0)
      responses:
        401:
          description: vous n'avez pas le droit de consulter les données de cet investisseur
        404: 
          description: l'investisseur n'a pas pu être trouvé
        200:
          description: les positions ouvertes de cet investisseur
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/position'
                example:
                  - ticker: 'AAPL'
                    quantity: 10
                    unitvalue: 155.9
                  - ticker: 'MSFT'
                    quantity: 8
                    unitvalue: 253.8
                  - ticker: 'NVDA'
                    quantity: 3
                    unitvalue: 493.8

  /wallet/{username}/cash:
    parameters:
    - name: username
      in: path
      description: le username de l'investisseur (plus d'infos, voir 'investor.yml#/components/schemas/investordata')
      required: true
      schema: 
        type: string
    
    post:
      description: |
        Permet à l'investisseur de verser ou retirer de son portefeuille
      requestBody:
        content:
          'application/json':
            schema:
                type: object
                properties:
                  cash: 
                    description: |
                      la quantité de CASH ajoutée ou supprimée du portefeuille de l'investisseur. 
                      Une valeur positive indiquera que l'investisseur a fait un versement de CASH sur son compte.
                      Une valeur négative indiquera que l'investisseur a fait un retrait de CASH depuis son compte.
                    type: number
            example:
            - cash: 1000.0
      responses:
        401:
          description: vous n'avez pas le droit de consulter les données de cet investisseur
        404: 
          description: l'investisseur n'a pas pu être trouvé
        200:
          description: les nouvelles positions ouvertes de cet investisseur (après qu'elles ait été mises à jour)
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/position'
  /wallet/{username}/net-worth:
    parameters:
    - name: username
      in: path
      description: le username de l'investisseur (plus d'infos, voir 'investor.yml#/components/schemas/investordata')
      required: true
      schema: 
        type: string
    get:
      description: Renvoie la valeur totale du portefeuille d'un investisseur 
      responses:
        401:
          description: vous n'avez pas le droit de consulter les données de cet investisseur
        404: 
          description: l'investisseur n'a pas pu être trouvé
        200:
          description: voila la valeur totale de cet investisseur
          content:
            'application/json':
              schema:
                type: number
components:
  schemas:
    investor_data:
      description: |
        Un investordata représente l'ensemble des données signalétiques d'un investisseur
        mais pas ses credentials (mot de passe, security token, ... peu importe le mécanisme
        d'authentification). 
        Dans une application réelle, les investordata comprendraient une série d'information
        relatives au profil d'investisseur MIFID etc... Ici on se contentera de ne garder que
        son nom, prénom, date de naissance, email et username.

        **Note** La plupart de ces information ne sera pas réellement utilisé dans notre système de 
        trading. Mais ces données personnelles seraient cruciales dans le cas d'une application de 
        trading réelle. Dans ce cas, il aurait fallu prendre en compte les prescription du RGPD pour
        la collecte et le stockage des informations.
      type: object
      properties:
        username:
          description: |
            Le username est un nom choisi par l'utilisateur. Ce nom est utilisé 
            comme identifiant unique au sein du système.
          type: string
        email:
          description: |
            Il s'agit de l'adresse email d'un utilisateur. C'est par ce biais que la société
            VSX pourra communiquer avec l'utilisateur.
          type: string
        firstname:
          description: |
            Il s'agit du prénom réel de l'investisseur avec lequel on traite.
          type: string
        lastname:
          description: |
            Il s'agit du nom de famille réel de l'investisseur avec lequel on traite.
        birthdate:
          description: |
            Il s'agit de la date de naissance de l'investisseur réel (sur une vraie plateforme, les mineurs
            n'ont ni le droit de posséder un compte, ni le droit d'emettre des ordres).
          type: string
      required:
        - username
        - email
        - firstname
        - lastname
        - birthdate
      example:
        username: picsou
        email: picsou@canardville.com
        firstname: Scrooge
        lastname: McDuck
        birthdate: 15/12/1947
    investor_with_password:
      description: |
        Les données signalétiques d'un investisseur ainsi que les credentials qu'il souhaite
        utiliser pour s'identifier dans le système.
      type: object
      properties:
        investor_data:
          $ref: '#/components/schemas/investor_data'
        password:
          type: string
      required:
        - investordata
        - password
      example:
        investor_data:
          username: picsou
          email: picsou@canardville.com
          firstname: Scrooge
          lastname: McDuck
          birthdate: 15/12/1947
        password: get_rich_fast
    credentials:
      type: object
      description: |
        Les credentials sont les données d'identification d'un investisseur au sein du système.
        Elles ne permettent que de dire que la personne existe et qu'elle s'est correctement identifié. 
        Cela ne donne absolument aucune information sur la personne réelle.
      properties:
        username:
          type: string
          description: |
            Le username est un nom choisi par l'utilisateur. Ce nom est utilisé 
            comme identifiant unique au sein du système.
        password:
          type: string
          description: |
            Le mot de passe de l'utilisateur
      example:
        username: VSXRocks
        password: password123
    order:
      description: |
        un ordre passé par un investisseur sur la plateforme d'échange.
      type: object
      properties:
        guid:
          description: |
            un identifiant gloablement unique qui permet donc d'identifier un ordre donné de facon univoque.

            **Important**
            Ce champ est optionnel et correspond à une donnée qui est fixée par le système. Il n'est donc pas
            permis à un utilisateur de décider du guid de l'ordre qu'il passe.
          type: string
          example: 6B29FC40-CA47-1067-B31D-00DD010662DA
        owner:
          description: |
            le username de l'investisseur qui a passé cet ordre. Pour plus d'informations, consulter
            'investor.yml#/components/schemas/investordata'
          type: string
        timestamp:
          description: |
            un timestamp représentant l'information relative au moment (date + heure + seconde) ou cet
            ordre a été passé.  Par facilité, on va considérer que ce timestamp correspond à un timestamp UNIX.
            C'est à dire le nombre de secondes qui se sont écoulées depuis EPOCH (1er janvier 1970).
          type: integer
        ticker:
          description: |
            le ticker est un code alphanumérique (généralement sur 4 char) qui indentifie un instrument
            financier de manière unique. (C'est une hypothèse simplificatrice: dans la pratique, seul le 
            code ISIN permet d'identifier un instrument financier de facon unique. Mais à nouveau, on considère
            que c'est ok dans le cadre de ce projet)
          type: string
          example: 'AAPL'
        quantity:
          description: |
            la quantité de cet instrument financier qui sera échangé suite à l'exécution de cet ordre
          type: integer
          example: 159
        side:
          $ref: '#/components/schemas/orderside'
        type:
          $ref: '#/components/schemas/ordertype'
        limit:
          description: |
            le prix d'achat ou de vente *unitaire* limite pour un instrument financier concerné par cet ordre.

            **Attention** Meme si ce champ est optionnel, il est obligatoire de le mentionner dans le cas ou 
            le champ 'type' reprend l'ordertype LIMIT. Sans ca, l'odre doit etre considéré comme inconsistant.
          type: number
        filled:
          description: |
            la quantité de titres concerné par cet ordre qui a déjà été échangée. 

            Dans le cas d'un ordre qui peut être satisfait en une seule opération (matching complet avec un seul 
            autre ordre), ce champ n'a que peu d'intéret. Cependant, il s'avère nécessaire lorsqu'on veut pouvoir
            dire qu'un ordre est partiellement satisfait. 

            **Exemple**
            Si  Alice décide de passer un ordre MARKET pour acheter 100 actions LNRD et 
            que Bob   décide de passer un ordre MARKET pour vendre 80 actions LNRD, 
            on pourra satisfaire l'ordre de Bob complètement, en une seule opération. L'odre de Alice, par contre, 
            n'est que partiellement complété. Dans ce cas, il est utile de savoir combien d'actions Alice souhaite
            encore acheter pour pouvoir satisfaire sa requete un peu plus tard, lorque Cedrick décidera de passer
            un ordre dans lequel il indique vouloir vendre 20 LNRD.

            **Note:**
            Ce champ est optionnel. Par défaut, on considère que sa valeur vaut 0
          type: integer
      required:
        - ticker
        - quantity
        - side
        - type
      example:
        owner: picsou
        timestamp: 457696995
        ticker: LNRD
        quantity: 10
        side: BUY
        type: LIMIT
        limit: 100.0
        filled: 5
    orderside:
      description: |
        De quel coté de la transaction se place le passeur d'ordre ? est-il vendeur ? est-il acheteur ?
      type: string
      enum:
        - BUY
        - SELL
    ordertype:
      description: |
        Les types d'ordres qui sont permis au sein de la plateforme VSX (à savoir pour l'instant: MARKET et LIMIT)
      type: string
      enum:
        - MARKET
        - LIMIT
    position:
      description: |
        Une position est une quantité d'un titre possédée par un investisseur donné
      properties:
        ticker:
          description: |
            le ticker est un code alphanumérique (généralement sur 4 char) qui indentifie un instrument
            financier de manière unique. (C'est une hypothèse simplificatrice: dans la pratique, seul le 
            code ISIN permet d'identifier un instrument financier de facon unique. Mais à nouveau, on considère
            que c'est ok dans le cadre de ce projet)
          type: string
          example: 'AAPL'
        quantity:
          description: |
            la quantité de cet instrument financier possédée par l'investisseur
          type: integer
          example: 159
        unitvalue:
          description: |
            la valeur unitaire de ce titre (le prix actuel de une seule action)
          type: number
          example: 155.9
      required:
        - ticker
        - quantity
        - unitvalue
      example:
        ticker: 'AAPL'
        quantity: 120
        unitvalue: 155.9



